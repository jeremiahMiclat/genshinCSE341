const express = require('express')

const router = express.Router()
const controller = require('../controller/character')
const { tryCatch } = require("../utils/tryCatch")

// get all characters
router.get('/', tryCatch(
  // #swagger.tags = ['Character']
  // #swagger.description = 'Displays all characters.'
  /* #swagger.responses[200] = { 
            description: 'Returns all characters information in a collection from mongodb genshin database',
            schema: { $ref: "#/definitions/Character collection" }
       } */
  controller.getAll
))

// get one character
router.get('/:id', tryCatch(
  // #swagger.tags = ['Character']
  // #swagger.description = 'Fetching a character document through _id from mongodb collection.'
  // #swagger.parameters['id'] = { description: 'ID of character.' }
  /* #swagger.responses[200] = { 
       schema: { $ref: "#/definitions/Character document" },
       description: 'Character data fetched from collection in db.' 
} */
  controller.getOne))

// add one
router.post('/', tryCatch(
  // #swagger.tags = ['Character']
  // #swagger.description = 'Create a new character document in the collection.'
  /* #swagger.parameters['character'] = {
               in: 'body',
               description: 'Information of a character to be created. All fields are required. Rarity must be 4star or 5star',
               required: true,
               schema: { $ref: "#/definitions/Character document creation" }
        } */
  /* #swagger.responses[201] = { 
           description: 'Returns character "_id" autogenerated by mongodb',
           schema: "63dd79bed4238c841b2794ee"
  } */
  controller.addOne))

// update one
router.put('/:id', tryCatch(
  // #swagger.tags = ['Character']
  // #swagger.description = 'Updating a character information.'
  // #swagger.parameters['id'] = { description: 'ID of character to be updated.' }
  /* #swagger.parameters['character'] = {
             in: 'body',
             description: 'Information of a character being updated. All fields are required. Rarity must be 4star or 5star',
             required: true,
             schema: { $ref: "#/definitions/Character document" }
      } */
  /* #swagger.responses[204] = { 
schema: { $ref: "#/definitions/Character document creation" },
description: 'Returns newly updated character information in this format' 
} */
  controller.updateOne
))
// delete one
router.delete('/:id', tryCatch(
  // #swagger.tags = ['Character']
  // #swagger.description = 'Deletes a character document from the collection'
  // #swagger.parameters['id'] = { description: 'ID from character document to be deleted. Example: 63dd79bed4238c841b2794ee' }
  /* #swagger.responses[200] = { 
          schema: { $ref: "#/definitions/Delete Responses" },
          description: 'Delete response of successful deletion. Take note of "deletedCount: 1"' 
     } */
  controller.delOne
))

module.exports = router